#!/bin/sh
#
#  gtdb-taxo-db - SQL serve the GTDB taxonomy
#  Copyright (C) 2017  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Home: http://github.com/zwets/gtdb-taxo


# Constants -----------------------------------------------------------------

# Our name, for messages
PRG_NAME="$(basename "$0")"

# Default location for the SQLite database
DEFAULT_SQLITE_DB="$HOME/.${PRG_NAME}/gtdb-taxo.db"


# Database definition -------------------------------------------------------
#
# Column descriptions taken from the taxdump readme.txt.
# We use TEMP tables for non-normalised tables and decompose after import.

DATABASE_CREATE_SQL='

SELECT "creating tables";

CREATE TABLE Ranks (
  rank_id INTEGER PRIMARY KEY,
  rank_name CHAR(7)
  );

INSERT INTO Ranks VALUES 
  (0, ""),
  (1, "domain"),
  (2, "phylum"),
  (3, "class"),
  (4, "order"),
  (5, "family"),
  (6, "genus"),
  (7, "species");

CREATE TABLE NodeRankParent (
  node_id TEXT PRIMARY KEY,
  rank_id INTEGER NOT NULL REFERENCES Ranks(rank_id),
  parent_node TEXT REFERENCES NodeRankParent(node)
  );

INSERT INTO NodeRankParent VALUES 
  ("0__root", 0, null),
  ("d__Archaea", 1, "0__root"),
  ("d__Bacteria", 1, "0__root");

CREATE TABLE SpeciesAccession (
  species_node TEXT NOT NULL PRIMARY KEY REFERENCES NodeRankParent(node_id),
  accession TEXT NOT NULL
  );

CREATE VIEW NamesView (
  node_id,
  parent_node,
  name,
  rank_name
  ) AS
    SELECT N.node_id, N.parent_node, SUBSTR(N.node_id,4), R.rank_name
    FROM NodeRankParent N NATURAL JOIN Ranks R;
  '


# Functions -----------------------------------------------------------------

# Emit arguments to stderr if VERBOSE
emit () {
    [ -z "$VERBOSE" ] || echo "${PRG_NAME}: $*" >&2 || true
}

# Exit this script with an error message on stderr
err_exit () {
    echo "${PRG_NAME}: $*" >&2
    exit 1
}

# Remove the argument unless KEEP is set
clean_up () {
    while [ $# -ne 0 ]; do
        if [ -n "$KEEP" ]; then
            echo "$PRG_NAME: not removing $1"
        elif [ -f "$1" ]; then
            emit "removing file: $1"
            rm -f "$1" || true
        elif [ -d "$1" ]; then
            emit "removing directory: $1"
            rmdir "$1" || true
        fi
        shift
    done
}

# Import database from tsv file $1 
import_database () {

    # Check existence of file to import
    [ -n "$1" -a -f "$1" ] || err_exit "no such file: $1"
    local INPUT_FILE="$1"

    # Create working directory and variables for import files
    local TMP_DIR="$(mktemp -d)" || err_exit "failed to create temporary directory"
    local TMP_SPC_ACC_FILE="$TMP_DIR/species_accession.tsv"
    local TMP_NAM_PAR_FILE="$TMP_DIR/name_rank_parent.tsv"

    # Produce the species_accession import file
    emit "creating $TMP_SPC_ACC_FILE"
    awk 'BEGIN { FS="\t"; OFS="\t"; }
         { split ($2, names, ";"); print names[7], $1; }
        ' "$INPUT_FILE" > "$TMP_SPC_ACC_FILE"

    # Produce the name_parent file
    emit "creating $TMP_NAM_PAR_FILE"
    awk 'BEGIN { FS="\t|;"; OFS="\t"; }
         { p = $2
           for (i=3; i<=8; ++i)
             { print $i, i-1, p; p = $i } 
         }
         ' "$INPUT_FILE" | sort -t "$(printf '\t')" -k1,1 -u > "$TMP_NAM_PAR_FILE"

    # Create temporary database so as to not overwrite existing until success
    local TMP_DBFILE="${SQLITE_DB}.$$"
    emit "create temporary database: $TMP_DBFILE"
    mkdir -p "$(dirname "$TMP_DBFILE")"

    # Run the database creation, import and normalisation
    echo "$DATABASE_CREATE_SQL
    SELECT \"importing data ...\";
.separator '\t'
.import '$TMP_SPC_ACC_FILE' SpeciesAccession
.import '$TMP_NAM_PAR_FILE' NodeRankParent
    $DATABASE_NORMALISE_SQL
    $DATABASE_VIEWS_SQL
" | sqlite3 -batch -bail "$TMP_DBFILE" || {
        clean_up "$TMP_SPC_ACC_FILE" "$TMP_NAM_PAR_FILE" "$TMP_DIR" "$TMP_DBFILE"
        err_exit "no changes, database import failed"
    } | while read OUTPUT; do emit "$OUTPUT"; done # 2>&1

    # Successful import
    emit "database import successful: $SQLITE_DB"
    clean_up "$TMP_SPC_ACC_FILE" "$TMP_NAM_PAR_FILE" "$TMP_DIR"
    mv -f "$TMP_DBFILE" "$SQLITE_DB"
}

# Show usage information and exit
usage_exit() {
    echo "
Usage: $PRG_NAME [OPTIONS] [SQL]

  Query the GTDB taxonomy using SQL.

  Options
   -d, --db DBFILE       Database file (default: $(echo $DEFAULT_SQLITE_DB | sed -e "s,^$HOME,~,"))
   -i, --import TSVFILE  Create or update database from TSVFILE (may be '-')
   -k, --keep            Do not delete temporary files (for debugging)
   -r, --regexp          Enable REGEXP extension, or exit with error
   -v, --verbose         Show progress messages on stderr
   -h, --help            Show usage information

  This program executes SQL against the taxonomy database DBFILE.  If no
  SQL argument is present or when it is '-', starts a SQLite interactive
  session on stdin.

  To explore the database structure, type '.schema' in interactive mode,
  which gives a fully annotated definition of the database. Type '.help'
  for help, and ^D or '.quit' to quit.

  The DBFILE is created by importing (--import) the gtdb_taxonomy.tsv file
  that comes with the GTDBTk database.  If you have installed GTDBTk, you
  should find it at \$GTDBTK_DATA_PATH/taxonomy/gtdb_taxonomy.tsv.

  For REGEXP search to work, you may need to install a SQLite3 extension.
  On Ubuntu this extension is available in package sqlite3-pcre.
" >&2
    exit ${1:-1}
}

# Check for sqlite3 

which sqlite3 >/dev/null 2>&1 || err_exit "sqlite3 command not found (is SQLite3 installed?)"

# Parse options

SQLITE_DB="$DEFAULT_SQLITE_DB"
unset IMPORT_TSV KEEP ENABLE_REGEXP VERBOSE
while [ $# -ne 0 -a "$(expr "$1" : '\(.\).*')" = "-" ]; do
    case $1 in
    -d|--db)
        shift
        [ $# -ge 1 ] || usage_exit
        SQLITE_DB="$1"
        ;;
    --db=*)
        SQLITE_DB="${1#--db=}"
        ;;
    -i|--import)
        shift
        [ $# -ge 1 ] || usage_exit
        IMPORT_TSV="$1"
        ;;
    --import=*)
        IMPORT_TSV="${1#--import=}"
        ;;
    -k|--keep)
        KEEP=1
        ;;
    -r|--regex*)
        ENABLE_REGEXP=1
        ;;
    -v|--verbose)
        VERBOSE=1
        ;;
    -h|--help)
        usage_exit 0
        ;;
    *) usage_exit
        ;;
    esac
    shift
done

# Check arguments

[ $# -lt 2 ] || usage_exit
[ $# -eq 0 ] || SQL="$1;"   # Add gratuitous terminating semicolon

# Possibly import taxdump

if [ -n "$IMPORT_TSV" ]; then
    import_database "$IMPORT_TSV" || err_exit "taxonomy database import failed"
    emit "database imported"
    exit 0
fi

# Check for the SQLite database

[ -f "$SQLITE_DB" ] || err_exit "no database file (use --import or --db): $SQLITE_DB"

# Check for the REGEXP extension, when option present

if [ -n "$ENABLE_REGEXP" ] && ! printf "SELECT 1 REGEXP 1;" | sqlite3 -bail -batch >/dev/null 2>&1; then
    if [ -f "/usr/lib/sqlite3/pcre.so" ]; then
        LOAD_STMT='.load /usr/lib/sqlite3/pcre.so'
    else
        err_exit "cannot do REGEXP search, SQLite3 lacks the required extension"
    fi
fi

# Execute either $SQL against database or start SQLite CLI

if [ -n "$SQL" ]; then # non-interactive 
    printf "${SQL}" | sqlite3 -cmd "$LOAD_STMT" -bail -batch -separator '	' "$SQLITE_DB"
else
    sqlite3 -cmd "$LOAD_STMT" -separator '	' "$SQLITE_DB"
fi

# vim: sts=4:sw=4:ai:si:et
